import 'package:flutter/material.dart';
import 'package:homecare0x1/constants.dart';
import 'package:homecare0x1/user_provider.dart';
import 'package:homecare0x1/widgets/cards/dashboard_card.dart';
import 'package:homecare0x1/widgets/common/modern_screen_layout.dart';
import 'package:provider/provider.dart';
import 'package:permission_handler/permission_handler.dart';

class CaregiverDashboardScreen extends StatelessWidget {
  const CaregiverDashboardScreen({super.key});

  Future<bool> _confirmLogout(BuildContext context) async {
    return await showDialog<bool>(
          context: context,
          builder: (context) => AlertDialog(
            title: const Text('Logout'),
            content: const Text('Are you sure you want to log out?'),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context, false),
                child: const Text('Cancel'),
              ),
              TextButton(
                onPressed: () => Navigator.pop(context, true),
                child: const Text('Logout'),
              ),
            ],
          ),
        ) ??
        false;
  }

  Future<bool> _requestLocationPermission(BuildContext context) async {
    var status = await Permission.location.request();
    if (status.isDenied || status.isPermanentlyDenied) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
              content: Text('Location permission is required to check in')),
        );
      }
      return false;
    }
    return true;
  }

  Future<bool> _confirmCheckIn(BuildContext context) async {
    return await showDialog<bool>(
          context: context,
          builder: (context) => AlertDialog(
            title: const Text('Check-In'),
            content: const Text('Do you want to check in for your visit?'),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context, false),
                child: const Text('Cancel'),
              ),
              TextButton(
                onPressed: () => Navigator.pop(context, true),
                child: const Text('Check-In'),
              ),
            ],
          ),
        ) ??
        false;
  }

  Future<bool> _confirmCheckOut(BuildContext context) async {
    return await showDialog<bool>(
          context: context,
          builder: (context) => AlertDialog(
            title: const Text('Check-Out'),
            content: const Text('Do you want to check out from your visit?'),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context, false),
                child: const Text('Cancel'),
              ),
              TextButton(
                onPressed: () => Navigator.pop(context, true),
                child: const Text('Check-Out'),
              ),
            ],
          ),
        ) ??
        false;
  }

  Future<String?> _addCareNote(BuildContext context) async {
    final TextEditingController controller = TextEditingController();
    return await showDialog<String>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Add Care Note'),
        content: TextField(
          controller: controller,
          decoration: const InputDecoration(
            labelText: 'Enter care note or observation',
            border: OutlineInputBorder(),
          ),
          maxLines: 3,
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              if (controller.text.trim().isNotEmpty) {
                Navigator.pop(context, controller.text.trim());
              }
            },
            child: const Text('Submit'),
          ),
        ],
      ),
    );
  }

  Future<Map<String, String>?> _logMedication(BuildContext context) async {
    final TextEditingController medController = TextEditingController();
    final TextEditingController doseController = TextEditingController();
    return await showDialog<Map<String, String>>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Log Medication'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: medController,
              decoration: const InputDecoration(
                labelText: 'Medication Name',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: doseController,
              decoration: const InputDecoration(
                labelText: 'Dosage',
                border: OutlineInputBorder(),
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              if (medController.text.trim().isNotEmpty &&
                  doseController.text.trim().isNotEmpty) {
                Navigator.pop(context, {
                  'medication': medController.text.trim(),
                  'dosage': doseController.text.trim(),
                });
              }
            },
            child: const Text('Submit'),
          ),
        ],
      ),
    );
  }

  void _handleCheckIn(BuildContext context) async {
    final hasPermission = await _requestLocationPermission(context);
    if (!hasPermission || !context.mounted) return;

    final confirmed = await _confirmCheckIn(context);
    if (confirmed && context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Successfully checked in')),
      );
    }
  }

  void _handleCheckOut(BuildContext context) async {
    final confirmed = await _confirmCheckOut(context);
    if (confirmed && context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Successfully checked out')),
      );
    }
  }

  void _handleAddCareNote(BuildContext context) async {
    final note = await _addCareNote(context);
    if (note != null && context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Care note added successfully')),
      );
    }
  }

  void _handleLogMedication(BuildContext context) async {
    final medication = await _logMedication(context);
    if (medication != null && context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Medication logged successfully')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final userProvider = Provider.of<UserProvider>(context);
    final userName = userProvider.user?.name ?? 'Caregiver';

    return ModernScreenLayout(
      title: 'Caregiver Dashboard',
      showBackButton: true,
      onBackPressed: () async {
        final shouldLogout = await _confirmLogout(context);
        if (shouldLogout && context.mounted) {
          userProvider.clearUser();
          Navigator.pushReplacementNamed(context, Routes.login);
        }
      },
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Welcome, $userName',
              style: Theme.of(context).textTheme.headlineMedium,
            ),
            const SizedBox(height: 8),
            Text(
              'Your caregiving tasks for today',
              style: Theme.of(context).textTheme.bodyLarge,
            ),
            const SizedBox(height: 24),
            DashboardCard(
              title: 'Client List',
              subtitle: 'View clients',
              value: '5',
              change: '+1',
              isPositive: true,
              icon: Icons.person,
              iconColor: Theme.of(context).colorScheme.primary,
              onTap: () => Navigator.pushNamed(context, Routes.clientList),
            ),
            DashboardCard(
              title: 'Task List',
              subtitle: 'View tasks',
              value: '3',
              change: '0',
              isPositive: true,
              icon: Icons.task,
              iconColor: Theme.of(context).colorScheme.secondary,
              onTap: () => Navigator.pushNamed(context, Routes.taskList),
            ),
            DashboardCard(
              title: 'Messages',
              subtitle: 'View messages',
              icon: Icons.message,
              iconColor: Theme.of(context).colorScheme.primary,
              onTap: () => Navigator.pushNamed(context, Routes.messages),
            ),
            DashboardCard(
              title: 'Check-In',
              subtitle: 'Start visit',
              icon: Icons.login,
              iconColor: Theme.of(context).colorScheme.secondary,
              onTap: () => _handleCheckIn(context),
            ),
            DashboardCard(
              title: 'Check-Out',
              subtitle: 'End visit',
              icon: Icons.logout,
              iconColor: Theme.of(context).colorScheme.secondary,
              onTap: () => _handleCheckOut(context),
            ),
            DashboardCard(
              title: 'Add Care Note',
              subtitle: 'Record observation',
              icon: Icons.note_add,
              iconColor: Theme.of(context).colorScheme.primary,
              onTap: () => _handleAddCareNote(context),
            ),
            DashboardCard(
              title: 'Log Medication',
              subtitle: 'Record medication',
              icon: Icons.medical_services,
              iconColor: Theme.of(context).colorScheme.secondary,
              onTap: () => _handleLogMedication(context),
            ),
            // DashboardCard(
            //   title: 'Tasks Completed',
            //   subtitle: 'View completed tasks',
            //   value: '8',
            //   change: '+2',
            //   isPositive: true,
            //   icon: Icons.check_circle,
            //   iconColor: Theme.of(context).colorScheme.primary,
            //   onTap: () => Navigator.pushNamed(context, Routes.tasksCompleted),
            // ),
          ],
        ),
      ),
    );
  }
}
